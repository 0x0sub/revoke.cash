import { utils } from 'ethers';
import fs from 'fs/promises';
import path from 'path';

const passedPath = process.argv[2];
const exploitRepoPath = passedPath;

const updateExploits = async () => {
  const exploits = await fs.readdir(path.join(exploitRepoPath, 'exploits'));
  const slugs = exploits.map((fn) => fn.replace('.json', ''));

  await Promise.all(
    slugs.map(async (slug) => {
      const exploitJson = await readExploit(slug);

      await Promise.all([lintExploit(slug, exploitJson), updateExploitMdDescription(slug, exploitJson)]);
    })
  );

  await fs.writeFile(path.join(exploitRepoPath, 'index.json'), `${JSON.stringify(slugs, null, 2)}\n`);
};

const readExploit = async (slug: string) => {
  const exploitPath = path.join(exploitRepoPath, 'exploits', `${slug}.json`);
  const exploitContents = await fs.readFile(exploitPath, 'utf-8');
  const exploitJson = JSON.parse(exploitContents);
  return exploitJson;
};

const lintExploit = async (slug: string, json: any) => {
  const exploitPath = path.join(exploitRepoPath, 'exploits', `${slug}.json`);

  const lintedAddresses = json.addresses.map(({ chainId, address }) => ({
    chainId,
    address: utils.getAddress(address.toLowerCase()),
  }));

  const lintedExploitJson = {
    ...json,
    addresses: lintedAddresses,
  };

  await fs.writeFile(exploitPath, `${JSON.stringify(lintedExploitJson, null, 2)}\n`);
};

const updateExploitMdDescription = async (slug: string, json: any) => {
  const exploitPath = path.join(__dirname, '..', 'content', 'en', 'exploits', 'short', `${slug}.md`);
  await fs.writeFile(exploitPath, `${json.description}\n`);
};

updateExploits();
